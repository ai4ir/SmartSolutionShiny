rsconnect::deployApp(appFiles=c("SmartSolutionMain.R", "..\\Model", "..\\SourceData", "..\\User", "Base", "main","sourcing"),
appPrimaryDoc="SmartSolutionMain.R")
if(!require(pryr)) install.packages("pryr")
if(!require(DT)) install.packages("DT")
if(!require(Rttf2pt1)) install.packages("Rttf2pt1")
if(!require(checkmate)) install.packages("checkmate")
if(!require(extrafont)) install.packages("extrafont")
if(!require(extrafontdb)) install.packages("extrafontdb")
if(!require(gridExtra)) install.packages("gridExtra")
if(!require(hrbrthemes)) install.packages("hrbrthemes")
if(!require(magick)) install.packages("magick")
if(!require(pander)) install.packages("pander")
if(!require(pryr)) install.packages("pryr")
if(!require(rapportools)) install.packages("rapportools")
library(shiny); runApp('SmartSolutionMain.R')
runApp('SmartSolutionMain.R')
library(shiny); runApp('SmartSolutionMain.R')
# install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='ai4ir', token='852555176774A01333180DF5F997AAD1',
secret='w1UW5ALljcOuTsXiTAgvYTRcM9/YsIeY6oGsin+q')
rsconnect::deployApp(appFiles=c("SmartSolutionMain.R", "..\\Model", "..\\SourceData", "..\\User", "Base", "main","sourcing"),
appPrimaryDoc="SmartSolutionMain.R")
# install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='ai4ir', token='852555176774A01333180DF5F997AAD1',
secret='w1UW5ALljcOuTsXiTAgvYTRcM9/YsIeY6oGsin+q')
rsconnect::deployApp(appFiles=c("SmartSolutionMain.R", "..\\Model", "..\\SourceData", "..\\User", "Base", "main","sourcing"),
appPrimaryDoc="SmartSolutionMain.R")
if(!require(summarytools)) install.packages("summarytools")
if(!require(viridis)) install.packages("viridis")
runApp('SmartSolutionMain.R')
# install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='ai4ir', token='852555176774A01333180DF5F997AAD1',
secret='w1UW5ALljcOuTsXiTAgvYTRcM9/YsIeY6oGsin+q')
rsconnect::deployApp(appFiles=c("SmartSolutionMain.R", "..\\Model", "..\\SourceData", "..\\User", "Base", "main","sourcing"),
appPrimaryDoc="SmartSolutionMain.R")
# install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='ai4ir', token='852555176774A01333180DF5F997AAD1',
secret='w1UW5ALljcOuTsXiTAgvYTRcM9/YsIeY6oGsin+q')
rsconnect::deployApp(appFiles=c("SmartSolutionMain.R", "..\\Model", "..\\SourceData\\mtcars", "..\\User", "Base", "main","sourcing"),
appPrimaryDoc="SmartSolutionMain.R")
# install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='ai4ir', token='852555176774A01333180DF5F997AAD1',
secret='w1UW5ALljcOuTsXiTAgvYTRcM9/YsIeY6oGsin+q')
rsconnect::deployApp(appFiles=c("SmartSolutionMain.R", "..\\Model", "..\\SourceData\\mtcars", "..\\User", "Base", "main","sourcing"),
appPrimaryDoc="SmartSolutionMain.R")
library(rsconnect)
rsconnect::setAccountInfo(name='ai4ir', token='852555176774A01333180DF5F997AAD1',
secret='w1UW5ALljcOuTsXiTAgvYTRcM9/YsIeY6oGsin+q')
rsconnect::deployApp(appFiles=c("SmartSolutionMain.R",
"sourcing\\mtcars",
"..\\Model", "..\\SourceData\\mtcars", "..\\User", "Base", "main","sourcing"),
appPrimaryDoc="SmartSolutionMain.R")
dfOrg <- diamomds
dfOrg <- diamonds
library(shiny); runApp('SmartSolutionMain.R')
dfOrg <- diamonds
View(dfOrg)
View(dfOrg)
runApp('SmartSolutionMain.R')
dfOrg <- mtcars
View(dfOrg)
runApp('SmartSolutionMain.R')
library(shiny); runApp('SmartSolutionShiny.R')
runApp('SmartSolutionShiny.R')
runApp('SmartSolutionShiny.R')
View(DFSource)
dfOrg <- diamonds
View(dfOrg)
for(x in colnames(dfOrg)) {
attr(dfOrg[,x], "label") <- x
}
View(dfOrg)
colnames(dfOrg)
attr(dfOrg[,"clarity"], "label") <- "투명도"
str(dfOrg)
dfOrg <- as.data.frame(dfOrg)
### "label" attribute는 그래프 라벨을 위해 반드시 필요함 ###
for(x in colnames(dfOrg)) {
attr(dfOrg[,x], "label") <- x
}
attr(dfOrg[,"clarity"], "label") <- "투명도"
View(dfOrg)
runApp('SmartSolutionShiny.R')
library(rsconnect)
rsconnect::setAccountInfo(name='ai4ir', token='852555176774A01333180DF5F997AAD1',
secret='w1UW5ALljcOuTsXiTAgvYTRcM9/YsIeY6oGsin+q')
rsconnect::deployApp(appFiles=c("SmartSolutionShiny.R",
"sourcing\\mtcars",
"..\\Model", "..\\SourceData\\mtcars", "..\\User", "Base", "main","sourcing"),
appPrimaryDoc="SmartSolutionShiny.R"
)
getwd()
library(shiny); runApp('SmartSolutionShiny.R')
library(shiny); runApp('SmartSolutionShiny.R')
library(shiny); runApp('SmartSolutionShiny.R')
projectWD <- getwd()
setwd("..")
dirPath <- paste0(getwd(),"/USER/EXCEL")
setwd(dirPath)
# Tell R to sleep until the current directory matches the expected directory
while(getwd() != normalizePath(dirPath, winslash="/")) {
Sys.sleep(0.02)
}
filePath <- file.choose()
filePath <- file.choose()
projectWD <- getwd()
setwd("..")
dirPath <- paste0(getwd(),"/SourceData/EXCEL")
setwd(dirPath)
# Tell R to sleep until the current directory matches the expected directory
while(getwd() != normalizePath(dirPath, winslash="/")) {
Sys.sleep(0.02)
}
filePath <- file.choose()
dirPath
library(shiny); runApp('SmartSolutionShiny.R')
projectWD <- getwd()
projectWD
setwd("..")
dirPath <- paste0(getwd(),"/SourceData/EXCEL")
setwd(dirPath)
# Tell R to sleep until the current directory matches the expected directory
while(getwd() != normalizePath(dirPath, winslash="/")) {
Sys.sleep(0.02)
}
filePath <- file.choose()
chosenDFSourceFileExt <<- str_split(filePath, "\\\\")[[1]][length( str_split(filePath, "\\\\")[[1]])]
chosenDFSourceFile <<- str_split(chosenDFSourceFileExt, "\\.")[[1]][1]
chosenDFSourceExt <- str_split(chosenDFSourceFileExt, "\\.")[[1]][2]
projectWD
chosenDFSourceFileExt
chosenDFSourceFile
chosenDFSourceExt
getwd()
setwd(projectWD)
getwd()
DFSource1 <- read_csv(fulePath,
sheet=1,
skip=4, col_names=FALSE)
DFSource1 <- read_csv(fulePath,
skip=4, col_names=FALSE)
DFSource1 <- read_csv(filePath,
skip=4, col_names=FALSE)
View(DFSource1)
DFSource1 <- as.data.frame(DFSource1)
labelVec <- read_csv(filePath,
range=cell_rows(2))
filePath
projectWD
projectWD <- getwd()
setwd("..")
dirPath <- paste0(getwd(),"/SourceData/EXCEL")
setwd(dirPath)
# Tell R to sleep until the current directory matches the expected directory
while(getwd() != normalizePath(dirPath, winslash="/")) {
Sys.sleep(0.02)
}
filePath <- file.choose()
chosenDFSourceFileExt <<- str_split(filePath, "\\\\")[[1]][length( str_split(filePath, "\\\\")[[1]])]
chosenDFSourceFile <<- str_split(chosenDFSourceFileExt, "\\.")[[1]][1]
chosenDFSourceExt <- str_split(chosenDFSourceFileExt, "\\.")[[1]][2]
setwd(projectWD)
chosenDFSourceFileExt
DFSource1 <- read_xlsx(filePath, sheet=1,
skip=4, col_names=FALSE)
DFSource1 <- as.data.frame(DFSource1)
labelVec <- read_xlsx(filePath,  sheet=1,
range=cell_rows(2))
xxx <- as.data.frame(labelVec)
yyy <- t(xxx)
labelVec <- attr(yyy,"dimnames")[[1]]
for(i in 1: NCOL(DFSource1)) {
str <- paste0("...",i)
attr(DFSource1[,str],"label") <- labelVec[i]
}
View(DFSource1)
colNameVec <- read_xls(filePath
sheet=1, range=cell_rows(6))
colNameVec <- read_xlsx(filePath,
sheet=1, range=cell_rows(6))
xxx <- as.data.frame(colNameVec)
yyy <- t(xxx)
colNameVec <- attr(yyy,"dimnames")[[1]]
colnames(DFSource1) <- colNameVec
colNameVec <- read_xlsx(filePath,
sheet=1, range=cell_rows(1))
xxx <- as.data.frame(colNameVec)
yyy <- t(xxx)
colNameVec <- attr(yyy,"dimnames")[[1]]
colnames(DFSource1) <- colNameVec
### valid Min, Max 행에는 보이지 않지만 enter가 포함되어야 함 ###
validMaxVec <- read_xlsx(filePath,
sheet=1, cell_rows(3), col_types="numeric")
validMaxVec
### valid Min, Max 행에는 보이지 않지만 enter가 포함되어야 함 ###
validMaxVec <- read_xlsx(filePath,
sheet=1, cell_rows(3), col_types="numeric")
validMaxVec
projectWD
projectWD <- getwd()
setwd("..")
dirPath <- paste0(getwd(),"/SourceData/EXCEL")
setwd(dirPath)
# Tell R to sleep until the current directory matches the expected directory
while(getwd() != normalizePath(dirPath, winslash="/")) {
Sys.sleep(0.02)
}
filePath <- file.choose()
chosenDFSourceFileExt <<- str_split(filePath, "\\\\")[[1]][length( str_split(filePath, "\\\\")[[1]])]
chosenDFSourceFile <<- str_split(chosenDFSourceFileExt, "\\.")[[1]][1]
chosenDFSourceExt <- str_split(chosenDFSourceFileExt, "\\.")[[1]][2]
setwd(projectWD)
DFSource1 <- read_xlsx(filePath, sheet=1,
skip=4, col_names=FALSE)
DFSource1 <- as.data.frame(DFSource1)
labelVec <- read_xlsx(filePath,  sheet=1,
range=cell_rows(2))
xxx <- as.data.frame(labelVec)
yyy <- t(xxx)
labelVec <- attr(yyy,"dimnames")[[1]]
for(i in 1: NCOL(DFSource1)) {
str <- paste0("...",i)
attr(DFSource1[,str],"label") <- labelVec[i]
}
colNameVec <- read_xlsx(filePath,
sheet=1, range=cell_rows(1))
xxx <- as.data.frame(colNameVec)
yyy <- t(xxx)
colNameVec <- attr(yyy,"dimnames")[[1]]
colnames(DFSource1) <- colNameVec
### valid Min, Max 행에는 보이지 않지만 enter가 포함되어야 함 ###
validMaxVec <- read_xlsx(filePath,
sheet=1, cell_rows(3), col_types="numeric")
### valid Min, Max 행에는 보이지 않지만 enter가 포함되어야 함 ###
validMaxVec <- read_xlsx(filePath,
sheet=1, cell_rows(3), col_types="numeric", col_names=FALSE)
validMaxVec
xxx <- as.data.frame(validMaxVec)
yyy <- t(xxx)
yyy
validMaxVec <- attr(yyy,"dimnames")[[1]]
validMaxVec
str(yyy)
xxx
xxx[2]
xxx[3]
for(i in 1: NCOL(DFSource1)) {
attr(DFSource1[,i],"validMax") <- xxx[i]
}
xxx
for(i in 1: NCOL(DFSource1)) {
attr(DFSource1[,i],"validMax") <- xxx[,i]
}
str(xxx)
for(i in 1: NCOL(DFSource1)) {
attr(DFSource1[,i],"validMax") <- xxx[1,i]
}
str(DFSource1)
validMinVec <- read_xls(filePath,
sheet=1, range=cell_rows(4), col_types="numeric", col_names=FALSE)
### valid Min, Max 행에는 보이지 않지만 enter가 포함되어야 함 ###
validMaxVec <- read_xlsx(filePath,
sheet=1, range=cell_rows(3), col_types="numeric", col_names=FALSE)
validMinVec <- read_xlsx(filePath,
sheet=1, range=cell_rows(4), col_types="numeric", col_names=FALSE)
xxx <- as.data.frame(validMinVec)
for(i in 1: NCOL(DFSource1)) {
attr(DFSource1[,i],"validMin") <- xxx[1,i]
}
str(DFSource1)
numVarConst <- extractNumVarNameAndConst(DFSource1)
decimalVec <- vapply(numVarConst, renderDigitVector,  FUN.VALUE=numeric(1), dfOrg)
decimalVec <- vapply(numVarConst, renderDigitVector,  FUN.VALUE=numeric(1), DFSource1)
decimalVec <- as.vector(decimalVec)
for(x in numVarConst) {
# numVarConst <- "thick"
attr(DFSource1[,x], "max") <- max(DFSource1[,x], na.rm=TRUE)
attr(DFSource1[,x], "mean") <- mean(DFSource1[,x], na.rm=TRUE)
attr(DFSource1[,x], "min") <- min(DFSource1[,x], na.rm=TRUE)
attr(DFSource1[,x], "digit") <- decimalVec[which(numVarConst==x)]
}
str(DFSource1)
runApp('SmartSolutionShiny.R')
runApp('SmartSolutionShiny.R')
View(DFSource)
runApp('SmartSolutionShiny.R')
runApp('SmartSolutionShiny.R')
runApp('SmartSolutionShiny.R')
library(shiny); runApp('SmartSolutionShiny.R')
dateVarNames
seq_along(dateVarNames)
View(DFSource)
selCatDomainExplore
MinDomainExplore
names(MinDomainExplore
)
############## 변수 분리 ################
numVar <- extractNumVarName(DFSource)
catVar <- extractCatVarName(DFSource)
func1 <- function(x) {
if(length(unique(DFSource[,x])) > 3 ) {
TRUE
} else {
FALSE
}
}
boolTrueNum <- vapply(numVar, func1, logical(1))
numVarTrue <- numVar[boolTrueNum]
numVarTrue
length(numVarTrue)
runApp('SmartSolutionShiny.R')
runApp('SmartSolutionShiny.R')
numVar <- extractNumVarName(DFSource)
catVar <- extractCatVarName(DFSource)
func1 <- function(x) {
if(length(unique(DFSource[,x])) > 3 ) {
TRUE
} else {
FALSE
}
}
boolTrueNum <- vapply(numVar, func1, logical(1))
numVarTrue <- numVar[boolTrueNum]
lengthNumVarTrue <- length(numVarTrue)
lengthNumVarTrue
runApp('SmartSolutionShiny.R')
library(shiny); runApp('SmartSolutionShiny.R')
runApp('SmartSolutionShiny.R')
library(shiny); runApp('SmartSolutionShiny.R')
pwd
library(shiny); runApp('SmartSolutionShiny.R')
library(shiny); runApp('SmartSolutionShiny.R')
library(shiny); runApp('SmartSolutionShiny.R')
df <- read_xlsx("../SourceData/EXCEL/mtcars.xlsx", sheet=1,
skip=4, col_names=FALSE)
df <- as.data.frame(df)
# str(df)
meta <- read_xlsx("../SourceData/EXCEL/mtcars_meta.xlsx",
sheet=1, range=cell_rows(1:3))
meta <- as.data.frame(meta)
colnames(df) <- colnames(meta)
for(i in 1: NCOL(df)) {
attr(df[,i],"validMax") <- meta[1,i]
attr(df[,i],"validMin") <- meta[2,i]
}
label <- read_xlsx("../SourceData/EXCEL/mtcars_meta.xlsx",
sheet=1, range=cell_rows(4))
label <- as.data.frame(label)
for(i in 1: NCOL(df)) {
attr(df[,i],"label") <- colnames(label)[i]
}
# validMinDF <- vector(mode="numeric",dim(dfOrg)[2] )
validMaxDF <- rep(NA,dim(df)[2] )
for(i in 1: dim(df)[2]) {
if(!is.null(attr(df[,i],"validMax"))) {
validMaxDF[i] <- attr(df[,i],"validMax")
}
}
attr(df,"validMax") <- validMaxDF
validMinDF <- rep(NA,dim(df)[2] )
for(i in 1: dim(df)[2]) {
if(!is.null(attr(df[,i],"validMin"))) {
validMinDF[i] <- attr(df[,i],"validMin")
}
}
attr(df,"validMin") <- validMinDF
numVarConst <- extractNumVarNameAndConst(df)
decimalVec <- vapply(numVarConst, renderDigitVector,  FUN.VALUE=numeric(1), df)
decimalVec <- as.vector(decimalVec)
for(x in numVarConst) {
# numVarConst <- "thick"
attr(df[,x], "max") <- max(df[,x], na.rm=TRUE)
attr(df[,x], "mean") <- mean(df[,x], na.rm=TRUE)
attr(df[,x], "min") <- min(df[,x], na.rm=TRUE)
attr(df[,x], "digit") <- decimalVec[which(numVarConst==x)]
}
DFSource1 <- sticky_all(df)
View(DFSource1)
df <- read_xlsx("../SourceData/EXCEL/mtcars.xlsx", sheet=1,
skip=4, col_names=FALSE)
df <- as.data.frame(df)
View(df)
# str(df)
meta <- read_xlsx("../SourceData/EXCEL/mtcars_meta.xlsx",
sheet=1, range=cell_rows(1:3))
meta <- as.data.frame(meta)
colnames(df) <- colnames(meta)
View(df)
View(meta)
df <- read_xlsx("../SourceData/EXCEL/mtcars.xlsx", sheet=1,
skip=4, col_names=FALSE)
df <- as.data.frame(df)
# str(df)
meta <- read_xlsx("../SourceData/EXCEL/mtcars_meta.xlsx",
sheet=1, range=cell_rows(1:3))
meta <- as.data.frame(meta)
colnames(df) <- colnames(meta)
for(i in 1: NCOL(df)) {
attr(df[,i],"validMax") <- meta[1,i]
attr(df[,i],"validMin") <- meta[2,i]
}
label <- read_xlsx("../SourceData/EXCEL/mtcars_meta.xlsx",
sheet=1, range=cell_rows(4))
label <- as.data.frame(label)
for(i in 1: NCOL(df)) {
attr(df[,i],"label") <- colnames(label)[i]
}
# validMinDF <- vector(mode="numeric",dim(dfOrg)[2] )
validMaxDF <- rep(NA,dim(df)[2] )
for(i in 1: dim(df)[2]) {
if(!is.null(attr(df[,i],"validMax"))) {
validMaxDF[i] <- attr(df[,i],"validMax")
}
}
attr(df,"validMax") <- validMaxDF
validMinDF <- rep(NA,dim(df)[2] )
for(i in 1: dim(df)[2]) {
if(!is.null(attr(df[,i],"validMin"))) {
validMinDF[i] <- attr(df[,i],"validMin")
}
}
attr(df,"validMin") <- validMinDF
numVarConst <- extractNumVarNameAndConst(df)
decimalVec <- vapply(numVarConst, renderDigitVector,  FUN.VALUE=numeric(1), df)
decimalVec <- as.vector(decimalVec)
for(x in numVarConst) {
# numVarConst <- "thick"
attr(df[,x], "max") <- max(df[,x], na.rm=TRUE)
attr(df[,x], "mean") <- mean(df[,x], na.rm=TRUE)
attr(df[,x], "min") <- min(df[,x], na.rm=TRUE)
attr(df[,x], "digit") <- decimalVec[which(numVarConst==x)]
}
DFSource1 <- sticky_all(df)
View(DFSource1)
str(df)
runApp('SmartSolutionShiny.R')
chosenDFSourceFileExt
chosenDFSourceFile
length( str_split(filePath, "\\\\")[[1]])
filePath <- "../SourceData/EXCEL/mtcars.xlsx"
chosenDFSourceFileExt <<- str_split(filePath, "\\\\")[[1]][length( str_split(filePath, "\\\\")[[1]])]
chosenDFSourceFile <<- str_split(chosenDFSourceFileExt, "\\.")[[1]][1]
chosenDFSourceExt <- str_split(chosenDFSourceFileExt, "\\.")[[1]][2]
filePath <- "..\\SourceData\\EXCEL\\mtcars.xlsx"
chosenDFSourceFileExt <<- str_split(filePath, "\\\\")[[1]][length( str_split(filePath, "\\\\")[[1]])]
chosenDFSourceFile <<- str_split(chosenDFSourceFileExt, "\\.")[[1]][1]
chosenDFSourceExt <- str_split(chosenDFSourceFileExt, "\\.")[[1]][2]
filePathDir <- str_split(filePath, "\\\\")[[1]][length( str_split(filePath, "\\\\")[[1]])-1]
filePathDir <- str_split(filePath, "\\\\")[[1]][1:length( str_split(filePath, "\\\\")[[1]])-1]
filePathDir <- str_sub(filePath,1,str_length(filePath)-str_length(chosenDFSourceExt)-1)
filePathMeta <- paste0(filePathDir,"_meta.",chosenDFSourceExt)
runApp('SmartSolutionShiny.R')
View(updateCatVarSample)
filePath <- "..\\SourceData\\EXCEL\\mtcars.xlsx"   ### 지우지 마세요
chosenDFSourceFileExt <<- str_split(filePath, "\\\\")[[1]][length( str_split(filePath, "\\\\")[[1]])]
chosenDFSourceFile <<- str_split(chosenDFSourceFileExt, "\\.")[[1]][1]
chosenDFSourceExt <- str_split(chosenDFSourceFileExt, "\\.")[[1]][2]
filePathDir <- str_sub(filePath,1,str_length(filePath)-str_length(chosenDFSourceFile)-str_length(chosenDFSourceExt)-1)
runApp('SmartSolutionShiny.R')
runApp('SmartSolutionShiny.R')
str(DFSource)
runApp('SmartSolutionShiny.R')
runApp('SmartSolutionShiny.R')
runApp('SmartSolutionShiny.R')
runApp('SmartSolutionShiny.R')
runApp('SmartSolutionShiny.R')
runApp('SmartSolutionShiny.R')
runApp('SmartSolutionShiny.R')
meta[3,]
View(meta)
View(meta)
runApp('SmartSolutionShiny.R')
runApp('SmartSolutionShiny.R')
runApp('SmartSolutionShiny.R')
runApp('SmartSolutionShiny.R')
library(shiny); runApp('SmartSolutionShiny.R')
runApp('SmartSolutionShiny.R')
getwd()
runApp('SmartSolutionShiny.R')
runApp('SmartSolutionShiny.R')
library(shiny); runApp('SmartSolutionShiny.R')
runApp('SmartSolutionShiny.R')
runApp('SmartSolutionShiny.R')
runApp('SmartSolutionShiny.R')
runApp('SmartSolutionShiny.R')
runApp('SmartSolutionShiny.R')
runApp('SmartSolutionShiny.R')
runApp('SmartSolutionShiny.R')
runApp('SmartSolutionShiny.R')
library(shiny); runApp('SmartSolutionShiny.R')
library(shiny); runApp('SmartSolutionShiny.R')
library(shiny); runApp('SmartSolutionShiny.R')
library(shiny); runApp('SmartSolutionShiny.R')
runApp('SmartSolutionShiny.R')
runApp('SmartSolutionShiny.R')
runApp('SmartSolutionShiny.R')
str(DFSource)
View(aesList)
runApp('SmartSolutionShiny.R')
library(shiny); runApp('SmartSolutionShiny.R')
library(shiny); runApp('SmartSolutionShiny.R')
runApp('SmartSolutionShiny.R')
runApp('SmartSolutionShiny.R')
library(shiny); runApp('SmartSolutionShiny.R')
library(shiny); runApp('SmartSolutionShiny.R')
library(shiny); runApp('SmartSolutionShiny.R')
runApp('SmartSolutionShiny.R')
